From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Niklas <57962465+niklasnieberler@users.noreply.github.com>
Date: Wed, 21 Aug 2024 22:56:10 +0200
Subject: [PATCH] add DependencyManager


diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 4705c1d91e39fcc3c608b1f1a38a30d063ccf06e..43c9557032d53adc77240ee31667347d5f3af112 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -61,6 +61,7 @@ import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+import world.estaria.paper.DependencyManager; // forktest
 
 /**
  * Represents the Bukkit core, for version and Server singleton handling
@@ -83,6 +84,16 @@ public final class Bukkit {
         return server;
     }
 
+    // forktest start - add dependency manager
+    /**
+     * Returns the global plugin class loader dependency manager
+     * @return dependency manager instance
+     */
+    public static DependencyManager getDependencyManager() {
+        return server.getDependencyManager();
+    }
+    // forktest end
+
     /**
      * Returns the de facto plugins directory, generally used for storing plugin jars to be loaded,
      * as well as their {@link org.bukkit.plugin.Plugin#getDataFolder() data folders}.
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index c043d239c449bf4bb13a24467f2f6c67b4d28d2d..59c196ec390ef392957d7ac7b198b542e870bf4f 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -62,6 +62,7 @@ import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+import world.estaria.paper.DependencyManager; // forktest
 
 /**
  * Represents a server implementation.
@@ -104,6 +105,10 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
     @NotNull
     public String getName();
 
+    // forktest start - add dependency manager
+    DependencyManager getDependencyManager();
+    // forktest end
+
     /**
      * Gets the version string of this server implementation.
      *
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index 7e4f7cb2afbc145e532285c793573ad107bc3033..d614ff93cf4ffa5f58598d66a2de825f282539a7 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -21,12 +21,15 @@ import java.util.concurrent.ConcurrentHashMap;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 import java.util.jar.Manifest;
-import java.util.logging.Level;
+
+import org.bukkit.Bukkit; // forktest
+import org.bukkit.Server; // forktest
 import org.bukkit.plugin.InvalidPluginException;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.plugin.SimplePluginManager;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+import world.estaria.paper.DependencyManager; // forktest
 
 /**
  * A ClassLoader for plugins, to allow shared classes across multiple plugins
@@ -59,6 +62,15 @@ public final class PluginClassLoader extends URLClassLoader implements io.paperm
         super(file.getName(), new URL[] {file.toURI().toURL()}, parent);
         this.loader = null; // Paper - pass null into loader field
 
+        // forktest start
+        DependencyManager dependencyManager = Bukkit.getDependencyManager();
+        for (File dependencyFile : dependencyManager.getDependencyFiles()) {
+            addURL(dependencyFile.toURI().toURL());
+            dependencyManager.blockedFiles.add(dependencyFile);
+            Bukkit.getLogger().info("Loading " + dependencyFile.getName());
+        }
+        // forktest end
+
         this.description = description;
         this.dataFolder = dataFolder;
         this.file = file;
diff --git a/src/main/java/world/estaria/paper/DependencyManager.java b/src/main/java/world/estaria/paper/DependencyManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..72c642b6af47ce89ff4b95580b482f3f525bf27e
--- /dev/null
+++ b/src/main/java/world/estaria/paper/DependencyManager.java
@@ -0,0 +1,46 @@
+package world.estaria.paper;
+
+import java.io.File;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Objects;
+
+public class DependencyManager {
+
+    private final File directory = new File("dependencies");
+
+    public DependencyManager() {
+        checkFolderExists();
+    }
+
+    public List<File> blockedFiles = new ArrayList<>();
+
+    public void checkFolderExists() {
+        if (!this.directory.exists()) {
+            this.directory.mkdirs();
+        }
+    }
+
+    public List<URL> getDependencyUrls() {
+        return getDependencyFiles().stream().map(file -> {
+            try {
+                return file.toURI().toURL();
+            } catch (MalformedURLException e) {
+                throw new RuntimeException(e);
+            }
+        }).toList();
+    }
+
+    public List<File> getDependencyFiles() {
+        return Arrays.stream(Objects.requireNonNull(this.directory.listFiles()))
+            .filter(File::isFile)
+            .filter(file -> file.getName().endsWith(".jar"))
+            .filter(file -> !blockedFiles.contains(file))
+            .toList();
+    }
+
+}
+
